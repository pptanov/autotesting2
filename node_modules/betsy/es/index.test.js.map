{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from './'\n\ninterface Events {\n  test: {\n    test: boolean\n  }\n}\n\nlet emitter: EventEmitter<Events>\n\nbeforeEach(() => {\n  emitter = new EventEmitter()\n})\n\ndescribe('Betsy', () => {\n  test('should emit to no listeners', () => {\n    expect.assertions(0)\n\n    emitter.emit('test', { test: true })\n  })\n\n  test('should receive event from subscription', () => {\n    expect.assertions(1)\n\n    emitter.on('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.emit('test', { test: true })\n  })\n\n  test('should receive events  from subscription', () => {\n    expect.assertions(3)\n\n    emitter.on('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.emit('test', { test: true })\n    emitter.emit('test', { test: true })\n    emitter.emit('test', { test: true })\n  })\n\n  test('should receve only one event from once', () => {\n    expect.assertions(4)\n\n    emitter.once('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.on('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.emit('test', { test: true })\n    emitter.emit('test', { test: true })\n    emitter.emit('test', { test: true })\n  })\n\n  test('should receve only one event when not the first subscription', () => {\n    expect.assertions(7)\n\n    emitter.on('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.once('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.on('test', (data) => {\n      expect(data).toEqual({\n        test: true,\n      })\n    })\n\n    emitter.emit('test', { test: true })\n    emitter.emit('test', { test: true })\n    emitter.emit('test', { test: true })\n  })\n})\n"]}