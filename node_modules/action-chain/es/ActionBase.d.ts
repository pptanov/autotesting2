import { ActionChain } from './ActionChain';
import { ExecutionContext } from './types';
export declare class StopExecution {
    value: any;
    constructor(value: any);
}
export declare class ActionBase<Effects> {
    private actionChain;
    private initialActionId;
    private runOperators?;
    static nextActionId: number;
    private currentExecutionId;
    constructor(actionChain: ActionChain<Effects>, initialActionId?: number, runOperators?: (value: any, executionContext: ExecutionContext, newPath?: string) => any | Promise<any>);
    getActionChain<ExtraEvents = {}>(): ActionChain<Effects, ExtraEvents>;
    createOperatorResult: (type: string, name: string, cb: any) => [ActionChain<Effects, {}>, number, any];
}
