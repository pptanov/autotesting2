"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.doNotProxy = Symbol('doNotProxy');
function isObject(value) {
    return typeof value === 'object' && !Array.isArray(value) && value !== null;
}
var hasWarnedConstructor = false;
function createProxyGetHandler(path, cb) {
    return function (target, prop) {
        if (typeof target[prop] === 'function') {
            var func = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var result = target[prop].apply(this, args);
                if (result instanceof Promise) {
                    result.then(function (promisedResult) {
                        // eslint-disable-next-line standard/no-callback-literal
                        cb({
                            name: path,
                            method: prop,
                            args: args,
                            result: promisedResult,
                        });
                    });
                }
                else {
                    // eslint-disable-next-line standard/no-callback-literal
                    cb({
                        name: path,
                        method: prop,
                        args: args,
                        result: result,
                    });
                }
                return result;
            };
            return new Proxy(func, {
                construct: function (_, args) {
                    var _a;
                    // eslint-disable-next-line
                    cb({
                        name: path,
                        method: prop,
                        args: args,
                        result: "[" + prop.toString() + "]",
                    });
                    if (!hasWarnedConstructor) {
                        console.warn("EFFECTS - It is highly recommended to create a custom effect, exposing a method that deals with the instantiation of \"" + path + "." + prop.toString() + "\". It improves readability and debugability of your app");
                        hasWarnedConstructor = true;
                    }
                    return new ((_a = target[prop]).bind.apply(_a, [void 0].concat(args)))();
                },
            });
        }
        if (isObject(target[prop])) {
            return new Proxy(target[prop], {
                get: createProxyGetHandler(path + '.' + prop.toString(), cb),
            });
        }
        return target[prop];
    };
}
function proxifyEffects(effects, skipKeys, cb) {
    if (skipKeys === void 0) { skipKeys = []; }
    return Object.keys(effects).reduce(function (currentEffects, key) {
        var effect = effects[key];
        if (skipKeys.indexOf(key) === -1 && isObject(effect)) {
            currentEffects[key] = new Proxy(effect, {
                get: createProxyGetHandler(key, cb),
            });
        }
        else {
            currentEffects[key] = effect;
        }
        return currentEffects;
    }, {});
}
exports.proxifyEffects = proxifyEffects;
//# sourceMappingURL=utils.js.map